#include "system.h"
#include "basic_io.h"
//#include "LCD.h"
//#include "Test.h"
#include "sys/alt_irq.h"
//#include "VGA.h"
#include "BASICTYP.h"
#include "HAL4D13.h"

//#include "SEG7.h"

#include <stdio.h>
#include "PTD.h"
#include "port.h"
#include "isa290.h"
#include "reg.h"
#include "buf_man.h"
#include "usb.h"
#include "helper.h"
#include "keyboard.h"
#include <unistd.h>
//#define VGA_BASE VGA_0_BASE
//#define SEG7_BASE SEG7_DISPLAY_BASE

int maxmin(int no, int max, int min)
{
	if(no>max) {no=max;}
	if(no<min) {no=min;}

	return(no);
}

void play_keyboard(unsigned int addr)
{
	unsigned int cbuf[128];
	unsigned int rbuf[128];

	//buffer information
	unsigned int atllen,ptllen,intllen;
	unsigned int int_start;

	//int parameters
	unsigned long int_skip=0xFFFFFFFE;
	unsigned long int_last=0x00000001;
	unsigned int  int_blk_size=64;

	unsigned int timecnt;
	unsigned int freq;

	signed char X=0,Y=0,B=0;

	unsigned int pX=320,pY=240;
	unsigned int oX=320,oY=240;

	unsigned int tog=0;

	freq=0x00;
	//freq=0x02;
	erase_all();

	w16(HcBufStatus,0x00);

	//Setup Int Parameters
	w32(HcIntSkip,int_skip);
	w32(HcIntLast,int_last);
	w16(HcIntBlkSize,int_blk_size);

	//Setup Buffer
	atllen  =r16(HcATLLen);
	ptllen  =r16(HcPTLLen);
	intllen =r16(HcINTLen);

	//printf("\natllen=%x ptllen=%x intllen=%x\n", atllen, ptllen, intllen);
	int_start=ptllen+ptllen;

	do
	{
		//send out DATA IN packet
		make_int_ptd(cbuf,IN,1,DATA_IN_PACKET_LENGTH,tog%2,addr,addr,freq);
		//printf("\ncbuf[0]=%8x, cbuf[1]=%8x, cbuf[2]=%8x, cbuf[3]=%8x", cbuf[0], cbuf[1], cbuf[2], cbuf[3]);
		//printf(", cbuf[4]=%8x, cbuf[5]=%8x", cbuf[4], cbuf[5]);
		//printf(", cbuf[4]=%8x, cbuf[5]=%8x, cbuf[6]=%8x, cbuf[7]=%8x", cbuf[4], cbuf[5], cbuf[6], cbuf[7]);


		timecnt=send_int(cbuf,rbuf);
		printf("\ntimecnt=%d",timecnt);
		if(timecnt!=0)
		{
			X=(rbuf[4]>>8);
			Y=(rbuf[5]&0x00FF);
			B=(rbuf[4]&0x000F);
		}
		else
		{
			X=0;
			Y=0;
			B=0;
		}
		// printf("\nccode?=%d", ((rbuf[0])&(0xF000))>>12);
		printf("\nrbuf[0]=%8x, rbuf[1]=%8x, rbuf[2]=%8x, rbuf[3]=%8x", rbuf[0], rbuf[1], rbuf[2], rbuf[3]);
		//printf(", rbuf[4]=%8x, rbuf[5]=%8x, rbuf[6]=%8x, rbuf[7]=%8x", rbuf[4], rbuf[5], rbuf[6], rbuf[7]);
		printf(", rbuf[5]=%8x, rbuf[6]=%8x, rbuf[7]=%8x, rbuf[8]=%8x", rbuf[5], rbuf[6], rbuf[7], rbuf[8]);

		if(timecnt!=0) {tog++;}

	}
	while((r16(HcRhP2) & 0x01) ==0x01);
    printf("\nKeyboard Not Detected");
}

void keyboard(void)
{
	unsigned int rbuf[128];
	unsigned int dev_req[4]={0x0680,0x0100,0x0000,0x0008};
	unsigned int uni_req[4]={0x0500,3,0x0000,0x0000};

	//buffer information
	unsigned int atllen,ptllen,intllen;
	unsigned int atl_start;

	//atl parameters
	unsigned long atl_skip=0xFFFFFFFE;
	unsigned long atl_done=0;
	unsigned long atl_last=0x00000001;
	unsigned int  atl_blk_size=64;
	unsigned int  atl_cnt=1;
	//unsigned int  atl_timeout=200;
	unsigned int  atl_timeout=5;
	unsigned int mycode;
	unsigned int iManufacturer,iProduct;
	unsigned int starty=5;
	unsigned int status;
	unsigned int kb01=0,kb02=0;
	unsigned int g=0;

	while(1)
	{
		dev_req[0]=0x0680;
		dev_req[1]=0x0100;
		dev_req[2]=0x0000;
		dev_req[3]=0x0008;
		uni_req[0]=0x0500;
		uni_req[1]=3;
		uni_req[2]=0x0000;
		uni_req[3]=0x0000;


		//atl parameters
		atl_skip=0xFFFFFFFE;
		atl_done=0;
		atl_last=0x00000001;
		atl_blk_size=64;
		atl_cnt=1;
		atl_timeout=200;
		starty=5;
		kb01=0,kb02=0;


		set_operational();
		enable_port();

		reset_usb();
		erase_all();
		set_operational();
		enable_port();


		w16(HcControl,0x6c0);
		w16(HcUpInt,0x1a9);
		//delay(300);

		w16(HcBufStatus,0x00);

		//Setup ATL Parameters
		w32(HcATLSkip,atl_skip);
		w32(HcATLLast,atl_last);
		w16(HcATLBlkSize,atl_blk_size);
		w16(HcATLThrsCnt,atl_cnt);
		w16(HcATLTimeOut,atl_timeout);

		//Setup ATL Buffer
		atllen  =r16(HcATLLen);
		ptllen  =r16(HcPTLLen);
		intllen =r16(HcINTLen);

		atl_start=ptllen+ptllen+intllen;

		status=assign_address(1,2,0);
		status=assign_address(1,2,0);

		if(g==0)
		{
			printf("USB Keyboard Demo.....\n");
			g=1;
		}

		w16(HcUpIntEnable,0x120);

		//printf("\nstatus = %x", status);

		if( (status&0x0001)!=0) //port 2 active
		{
			//  Check port 2 for keyboard
			mycode=get_control(rbuf,2,'D',0,2);
			//rbuf is Device Descriptor
			//printf(", mycode = %x, rbuf[7] = %x, rbuf[1] = %x", mycode, rbuf[7], rbuf[1]);
			if(mycode==0x0300)
			{
				iManufacturer = rbuf[7]&0xFF;
				iProduct = (rbuf[7]&0xFF00)>>8;
				//printf(", iManufacturer = %d, iProduct = %d", iManufacturer, iProduct);
				addr_info(2,'W','O',iManufacturer);
				addr_info(2,'W','P',iProduct);
				mycode=get_control(rbuf,2,'H',addr_info(2,'R','P',0),2);
				//rbuf is Report Descriptor
				printf("\nmycode = %x, rbuf[1] = %x, rbuf[2] = %x", mycode, rbuf[1], rbuf[2]);
				if( *(rbuf+1)==0x0609  )
				{
					printf("\nKeyboard Detected");
					kb02=1;
				}
			}
		}

		if((kb02==1)&&(kb01==0))	// Port 2 is connected with keyboard
		{
			mycode=set_config(2,1);
			if(mycode==0)
				play_keyboard(2);
		}

		usleep(100000);
	}
}





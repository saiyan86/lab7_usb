/*---------------------------------------------------------------------------
  --      main.c                                                    	   --
  --      Christine Chen                                                   --
  --      Ref. DE2-115 Demonstrations by Terasic Technologies Inc.         --
  --      Fall 2014                                                        --
  --                                                                       --
  --      For use with ECE 298 Experiment 7                                --
  --      UIUC ECE Department                                              --
  ---------------------------------------------------------------------------*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <io.h>
#include <fcntl.h>

#include "system.h"
#include "alt_types.h"
#include <unistd.h>  // usleep 
#include "sys/alt_irq.h"

#include "cy7c67200.h"
#include "usb.h"
#include "lcp_cmd.h"
#include "lcp_data.h"
//#include "LCD.h"
//#include "VGA.h"
//#include "SEG7.h"

//#define KEYCODE (volatile char*) KEYCODE_BASE;

//--------------------------------------
int maxmin(int no, int max, int min)
{
	if(no>max) {no=max;}
	if(no<min) {no=min;}

	return(no);
}
//--------------------------------------
//----------clear screen----------------
/*
void Vga_clear_screen(base)
{
    alt_u16 x_col,y_col;
    for(y_col=0;y_col<VGA_HEIGHT;y_col++)
      {
        for(x_col=0;x_col<VGA_WIDTH;x_col++)
        {
            Vga_Clr_Pixel(base,x_col,y_col);
        }
      }
}*/

//----------------------------------------------------------------------------------------//
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
	int button_value;
	int button_value2;
	alt_u16 px = 320;
	alt_u16 py = 240;
	signed char  dx = 0;
	signed char  dy = 0;
	alt_u8  pbutton = 0;
	alt_u8 toggle=0;
	alt_u8 data_size;

	alt_u16 code;

	printf("USB keyboard setup...\n\n");

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
	UsbWrite (HOST1_STAT_REG, 0xFFFF);

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
	UsbWrite(COMM_R1,0x0000);  //port number
	UsbWrite(COMM_R2,0x0000);  //r1
	UsbWrite(COMM_R3,0x0000);  //r1
	UsbWrite(COMM_R4,0x0000);  //r1
	UsbWrite(COMM_R5,0x0000);  //r1
	UsbWrite(COMM_R6,0x0000);  //r1
	UsbWrite(COMM_R7,0x0000);  //r1
	UsbWrite(COMM_R8,0x0000);  //r1
	UsbWrite(COMM_R9,0x0000);  //r1
	UsbWrite(COMM_R10,0x0000);  //r1
	UsbWrite(COMM_R11,0x0000);  //r1
	UsbWrite(COMM_R12,0x0000);  //r1
	UsbWrite(COMM_R13,0x0000);  //r1
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK)
	{
		printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end


	// STEP 2 begin
	//usleep(30*1000);
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
	UsbWrite(COMM_R0,0x003c);//reset time
	UsbWrite(COMM_R1,0x0000);  //port number
	UsbWrite(COMM_R2,0x0000);  //r1
	UsbWrite(COMM_R3,0x0000);  //r1
	UsbWrite(COMM_R4,0x0000);  //r1
	UsbWrite(COMM_R5,0x0000);  //r1
	UsbWrite(COMM_R6,0x0000);  //r1
	UsbWrite(COMM_R7,0x0000);  //r1
	UsbWrite(COMM_R8,0x0000);  //r1
	UsbWrite(COMM_R9,0x0000);  //r1
	UsbWrite(COMM_R10,0x0000);  //r1
	UsbWrite(COMM_R11,0x0000);  //r1
	UsbWrite(COMM_R12,0x0000);  //r1
	UsbWrite(COMM_R13,0x0000);  //r1

	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_EXEC_INT);

	while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK)
	{
		printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 2 end

	//usleep(30*1000);
	ctl_reg = USB1_CTL_REG;
	no_device = (A_DP_STAT | A_DM_STAT);
	fs_device = A_DP_STAT;

	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		printf("\n[INFO]: no device is present in SIE1!\n");
		printf("[INFO]: please insert a USB keyboard in SIE1!\n");
		while (!(usb_ctl_val & no_device))
		{
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device)
				goto USB_HOT_PLUG;

			usleep(2000);
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
		{
			printf("[INFO]: full speed device\n");
		}
		else
		{
			printf("[INFO]: low speed device\n");
		}
	}


	//printf("[SIE1 INIT]:USB 1 Control Register reg is %x\n",UsbRead(0xC08A));

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506); // i
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508); // n
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03) // retries occurred
	{
		/*IORD(CY7C67200_BASE,HPI_STATUS);
		if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
		{
			UsbWrite(HPI_SIE1_MSG_ADR, 0);

			while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
			{
			}
		}
		//usleep(1000);
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
		usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);*/
		usb_ctl_val = UsbGetRetryCnt();

		goto USB_HOT_PLUG;
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");


	//-------------------------------get device descriptor-1 -----------------------------------//
	UsbGetDeviceDesc1();

	//usleep(10*1000);
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
	{
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
	{
		/*IORD(CY7C67200_BASE,HPI_STATUS);
		if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
		{
			UsbWrite(HPI_SIE1_MSG_ADR, 0);

			while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
			{
			}
		}
		//usleep(1000);
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
		usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);*/
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	UsbGetDeviceDesc2();

	//usleep(100*1000);
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
	{
		//resend the get device descriptor
		//get device descriptor
		UsbGetDeviceDesc2();

		usleep(10*1000);
	}

	UsbWaitTDListDone();

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
	{
		/*IORD(CY7C67200_BASE,HPI_STATUS);
		if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
		{
			UsbWrite(HPI_SIE1_MSG_ADR, 0);

			while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
			{

			}
		}
		//usleep(1000);
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
		usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);*/
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");

	//    IOWR(CY7C67200_BASE,HPI_ADDR,0x0554); //the start address
	//    printf("\n[ENUM PROCESS]:TD rec data8 is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	//usleep(1000);
	UsbGetConfigDesc1();

	//usleep(10*1000);
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
	{
		//resend the get device descriptor
		//get device descriptor

		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
	{
		/*IORD(CY7C67200_BASE,HPI_STATUS);
		if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
		{
			UsbWrite(HPI_SIE1_MSG_ADR, 0);

			while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
			{

			}
		}
		//usleep(1000);
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
		usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);*/
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");

	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	UsbGetConfigDesc2();

	usleep(100*1000);
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
	{
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
	{
		/*IORD(CY7C67200_BASE,HPI_STATUS);
		if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
		{
			UsbWrite(HPI_SIE1_MSG_ADR, 0);

			while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
			{

			}
		}
		//usleep(1000);
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
		usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);*/
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0568); //the start address
	code = IORD(CY7C67200_BASE,HPI_DATA);
	printf("\ncode = %04x\n", code);
	code = IORD(CY7C67200_BASE,HPI_DATA);
	printf("\ncode = %04x\n", code);
	code = IORD(CY7C67200_BASE,HPI_DATA);
	printf("\ncode = %04x\n", code);
	code = IORD(CY7C67200_BASE,HPI_DATA);
	printf("\ncode = %04x\n", code);
	code = IORD(CY7C67200_BASE,HPI_DATA);
	printf("\ncode = %04x\n", code);


	IOWR(CY7C67200_BASE,HPI_ADDR,0x056c); //the start address
	code = IORD(CY7C67200_BASE,HPI_DATA);
	printf("\ncode = %x\n", code);
	code = code & 0x0ff;
	if(code == 0x02)
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Mouse Detected!!!\n\n");
	}
	else if (code == 0x90)
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
	}
	else
	{
		//printf("\nvalue= %x\n", temp);
		printf("\n[INFO]:Mouse Not Detected!!! \n\n");
	}

	IOWR(CY7C67200_BASE,HPI_ADDR,0x057a); //the start address

	data_size = 9;//(IORD(CY7C67200_BASE,HPI_DATA)>>8)&0x0ff;
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);

	//------------------------------------set configuration -----------------------------------------//
	UsbSetConfig();
	//usleep(10*1000);

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
	{
		UsbSetConfig();
		usleep(10*1000);
	}

	UsbWaitTDListDone();

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
	{
		/*IORD(CY7C67200_BASE,HPI_STATUS);
		if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
		{
			UsbWrite(HPI_SIE1_MSG_ADR, 0);


			while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
			{
			}
		}
		//usleep(1000);
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
		usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);*/
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");

	//----------------------------------------------class request out ------------------------------------------//
	UsbClassRequest();
	//usleep(10*1000);

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
	{
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
	{
		/*IORD(CY7C67200_BASE,HPI_STATUS);
		if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
		{
			UsbWrite(HPI_SIE1_MSG_ADR, 0);


			while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
			{
			}
		}
		//usleep(1000);
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
		usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);*/
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");

	//----------------------------------get descriptor(class 0x21) request out --------------------------------//
	UsbGetHidDesc();

	//usleep(10*1000);

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
	{
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
	{
		/*IORD(CY7C67200_BASE,HPI_STATUS);
		if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
		{
			UsbWrite(HPI_SIE1_MSG_ADR, 0);


			while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
			{
			}
		}
		//usleep(1000);
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
		usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);*/
		usb_ctl_val = UsbGetRetryCnt();
	}



	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");

	//-------------------------------get descriptor (class 0x22)-------------------------------------------//
	UsbGetReportDesc();
	//usleep(100*1000);
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
	{
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
	{
		/*IORD(CY7C67200_BASE,HPI_STATUS);
		if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
		{
			UsbWrite(HPI_SIE1_MSG_ADR, 0);

			while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
			{

			}
		}
		//usleep(1000);
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
		usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);*/
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");



	//-----------------------------------get mouse x y button value------------------------------------------------//
	usleep(10000);
	while(1)
	{
		toggle++;
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
		//data phase IN-1
		IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
		if(data_size ==8)
		{
			IOWR(CY7C67200_BASE,HPI_DATA,0x0006);//2 data length
		}
		else
		{
			IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
		}
		IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
		if(toggle%2)
		{
			IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
		}
		else
		{
			IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
		}
		IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
		IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		//usleep(10*1000);
		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
		{
			IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
			//data phase IN-1
			IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
			if(data_size ==8)
			{
				IOWR(CY7C67200_BASE,HPI_DATA,0x0006);//2 data length
			}
			else
			{
				IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
			}
			IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
			if(toggle%2)
			{
				IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
			}
			else
			{
				IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
			}
			IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
			IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while


		usb_ctl_val = UsbWaitTDListDone();

		if (usb_ctl_val != 0x03)
		{
			pbutton = 0;
			dx = 0;
			dy = 0;
			button_value = 0;
		}

		else
		{


			if(data_size != 8 )
			{
				IOWR(CY7C67200_BASE,HPI_ADDR,0x051c); //the start address
				button_value = IORD(CY7C67200_BASE,HPI_DATA);
				if((button_value & 0x00ff) ==0x0001)
				{
					//printf("left button\n");
					pbutton = 1;
				}
				else
					if((button_value& 0x00ff) ==0x0002)
					{
						//printf("right button\n");
						pbutton = 2;
					}
					else
					{
						pbutton = 0;
					}
				if((signed char)((button_value>>8)&0x00ff) != 0)
				{

					if((signed char)((button_value>>8)&0x00ff )==dx)
					{
						dx = 0;
					}
					else
					{
						dx = (signed char)((button_value>>8)&0x00ff);
					}

				}

				button_value = IORD(CY7C67200_BASE,HPI_DATA);

				if(button_value&0xff)
				{
					//printf("dy value is %d\n",button_value&0xff);
					if((signed char)(button_value&0x00ff) == dy)
					{
						dy = 0;
					}
					else
					{
						dy = (signed char)(button_value&0xff);
					}

				}
			}
			else //>8
			{
				IOWR(CY7C67200_BASE,HPI_ADDR,0x051c); //the start address
				button_value = IORD(CY7C67200_BASE,HPI_DATA);
				if(((button_value>>8) & 0x00ff) ==0x0001)
				{
					//printf("left button\n");
					pbutton = 1;
				}
				else
					if(((button_value>>8) & 0x00ff) ==0x0002)
					{
						//printf("right button\n");
						pbutton = 2;
					}
					else
					{
						pbutton = 0;
					}
				button_value = IORD(CY7C67200_BASE,HPI_DATA);
				if((signed char)((button_value>>8)&0x00ff) != 0)
				{
					if((signed char)((button_value>>8)&0x00ff )==dy)
					{
						dy = 0;
					}
					else
					{
						dy = (signed char)((button_value>>8)&0x00ff);
					}

				}

				if(button_value&0x0ff)
				{
					//printf("dy value is %d\n",button_value&0xff);
					if((signed char)(button_value&0x00ff) == dx)
					{
						dx = 0;
					}
					else
					{
						dx = (signed char)(button_value&0xff);
					}

				}
			}

		}

		px = px + dx;
		py = py + dy;

		px=maxmin(px,639,0);
		py=maxmin(py,479,0);


		printf("\n[MOUSE XY]:%d, %d", px, py);

		IOWR(CY7C67200_BASE,HPI_ADDR,0x051c);
		button_value = IORD(CY7C67200_BASE,HPI_DATA);
		printf("\nbutton value is %x\n",button_value);
		button_value2 = IORD(CY7C67200_BASE,HPI_DATA);
		printf("button value 2 is %x\n",button_value2);
		IOWR(KEYCODE_BASE, 0, button_value2 & 0xff);
		//*KEYCODE = (button_value2 & 0xff);
		//printf("dy is %x\n",dy);

		usleep(5*1000);
		//USB hot plug routine
		usb_ctl_val = UsbRead(ctl_reg);
		usleep(5*1000);
		usb_ctl_val = UsbRead(ctl_reg);
		usleep(5*1000);
		usb_ctl_val = UsbRead(ctl_reg);
		usleep(5*1000);
		usb_ctl_val = UsbRead(ctl_reg);
		usleep(5*1000);
		usb_ctl_val = UsbRead(ctl_reg);
		usleep(5*1000);
		usb_ctl_val = UsbRead(ctl_reg);
		usleep(5*1000);

		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: the mouse has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		};
		usleep(5000);
		usb_ctl_val = UsbRead(ctl_reg);
		while (!(usb_ctl_val & no_device))
		{

			usb_ctl_val = UsbRead(ctl_reg);
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			usleep(5*1000);

			if(usb_ctl_val & no_device)
				goto USB_HOT_PLUG;

			usleep(200);

		}

	}//end while

	return 0;
}

